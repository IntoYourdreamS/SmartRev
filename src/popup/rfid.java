/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package popup;

import Config.Session;
import Config.koneksi;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import smart.dashboard;
import smart.karyawan;
import smart.restok;

/**
 *
 * @author ASUS
 */
public class rfid extends javax.swing.JFrame {
private Connection conn;
    /**
     * Creates new form coba
     */
    public rfid() {
        initComponents();
        makeButtonTransparent(kembali);
          this.setBackground(new Color(0, 0, 0, 0));
          initializeDatabaseConnection(); 
  // setUndecorated(true); // Hilangkan tombol X dan border
    }
     private void initializeDatabaseConnection() {
         conn = koneksi.getConnection(); // Mendapatkan koneksi dari class koneksi
    }

    private void makeButtonTransparent(JButton button) {
        button.setOpaque(false);
        button.setContentAreaFilled(false);
        button.setBorderPainted(false);
    }

    class Coba extends JDialog {

        public Coba() {
            setTitle("Popup Frame - Coba");
            setSize(200, 150);
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setLocationRelativeTo(null);
            setUndecorated(true);


            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE); // Mencegah ALT+F4
                }
            });
            JLabel label = new JLabel("BERHASIL DI TAMBAHKAN", SwingConstants.CENTER);
            JButton btnOK = new JButton("OK");
            btnOK.addActionListener(e -> dispose());

            JPanel panel = new JPanel();
            panel.add(label);
            panel.add(btnOK);

            add(panel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kembali = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        RFIDInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kembali.setBorder(null);
        kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliActionPerformed(evt);
            }
        });
        getContentPane().add(kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 30, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/rfid.png"))); // NOI18N
        jLabel2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 290));

        RFIDInput.setUI(null);
        getContentPane().add(RFIDInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 10, 10));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembaliActionPerformed
        // TODO add your handling code here:
        new dashboard().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_kembaliActionPerformed

    private void jLabel2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel2AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2AncestorAdded
private void ambilData(String rfid) {
    // Validasi format RFID terlebih dahulu
    if (rfid == null || rfid.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "RFID tidak valid", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String query = "SELECT * FROM karyawan WHERE RFID = ? LIMIT 1";
    try (PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setString(1, rfid);
        ResultSet hasil = ps.executeQuery();

        if (hasil.next()) {
            String idKaryawan = hasil.getString("id_karyawan");
            String role = hasil.getString("role");
            
            // Verifikasi kesesuaian RFID dengan karyawan
            if (!rfid.equals(hasil.getString("RFID"))) {
                JOptionPane.showMessageDialog(this, "RFID tidak sesuai dengan karyawan", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Set session data
            Session.setKode(idKaryawan);
            Session.setRole(role);
            
            // Insert data login dengan transaction handling
            try {
                conn.setAutoCommit(false); // Mulai transaction
                
                // 1. Update RFID di tabel karyawan jika belum sesuai (optional)
                String updateQuery = "UPDATE karyawan SET RFID = ? WHERE id_karyawan = ? AND (RFID IS NULL OR RFID != ?)";
                try (PreparedStatement updatePs = conn.prepareStatement(updateQuery)) {
                    updatePs.setString(1, rfid);
                    updatePs.setString(2, idKaryawan);
                    updatePs.setString(3, rfid);
                    updatePs.executeUpdate();
                }
                
                // 2. Insert data login ke detail_karyawan
                String insertQuery = "INSERT INTO detail_karyawan (id_karyawan, RFID, tanggal_masuk) VALUES (?, ?, NOW())";
                try (PreparedStatement insertPs = conn.prepareStatement(insertQuery)) {
                    insertPs.setString(1, idKaryawan);
                    insertPs.setString(2, rfid);
                    int affectedRows = insertPs.executeUpdate();
                    
                    if (affectedRows == 0) {
                        throw new SQLException("Gagal menyimpan data login");
                    }
                }
                
                conn.commit(); // Commit transaction jika semua sukses
                
                JOptionPane.showMessageDialog(this, "Login berhasil sebagai " + role, "Sukses", JOptionPane.INFORMATION_MESSAGE);
                new dashboard().setVisible(true);
                this.dispose();
                
            } catch (SQLException e) {
                conn.rollback(); // Rollback jika ada error
                throw e;
            } finally {
                conn.setAutoCommit(true); // Kembalikan auto-commit
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "RFID Tidak Terdaftar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rfid().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField RFIDInput;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton kembali;
    // End of variables declaration//GEN-END:variables
}
